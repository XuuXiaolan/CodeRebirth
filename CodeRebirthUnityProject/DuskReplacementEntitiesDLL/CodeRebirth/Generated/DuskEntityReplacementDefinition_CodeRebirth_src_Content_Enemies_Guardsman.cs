// <auto-generated> via DuskEntityReplacementBaker
#nullable enable
using UnityEngine;
using Dawn.Utils;
using System.Collections.Generic;
namespace Dusk
{
    [CreateAssetMenu(fileName = "New Enemy Replacement Definition", menuName = $"Entity Replacements/Enemy Replacements/CodeRebirth.src.Content.Enemies.Guardsman")]
    public class DuskEntityReplacementDefinition_CodeRebirth_src_Content_Enemies_Guardsman : DuskEnemyReplacementDefinition<CodeRebirth.src.Content.Enemies.Guardsman>
    {
        [Space(10)]
        public AudioClipsWithTime _idleAudioClips = new();
        public AudioClip? _slamAudioClip = null;
        public AudioClip? _ripApartAudioClip = null;
        public AudioClip? spawnSound = null;
        public AudioClip? dieSFX = null;
        public AudioClip[] _enemySpottedAudioClips = System.Array.Empty<AudioClip>();
        public AudioClip? potentialCreatureVoice = null;
        public AudioClip? potentialCreatureSFX = null;
        public ParticleSystem? _dustParticleSystem;

        protected override void ApplyTyped(CodeRebirth.src.Content.Enemies.Guardsman Guardsman)
        {
            CodeRebirth.src.Content.Enemies.Guardsman component = Guardsman.gameObject.GetComponentInChildren<CodeRebirth.src.Content.Enemies.Guardsman>();
            if (this._idleAudioClips.audioClips.Length > 0)
            {
                component._idleAudioClips = this._idleAudioClips;
            }
            if (this._enemySpottedAudioClips.Length > 0)
            {
                component._enemySpottedAudioClips = this._enemySpottedAudioClips;
            }
            if (component.creatureVoice.clip != null && this.potentialCreatureVoice != null)
            {
                component.creatureVoice.clip = this.potentialCreatureVoice;
            }
            if (component.creatureSFX.clip != null && this.potentialCreatureSFX != null)
            {
                component.creatureSFX.clip = this.potentialCreatureSFX;
            }
            if (this._slamAudioClip != null)
            {
                component._slamAudioClip = this._slamAudioClip;
            }
            if (this._ripApartAudioClip != null)
            {
                component._ripApartAudioClip = this._ripApartAudioClip;
            }
            if (this.spawnSound != null)
            {
                component.spawnSound = this.spawnSound;
            }
            if (this.dieSFX != null)
            {
                component.dieSFX = this.dieSFX;
            }
            if (this._dustParticleSystem != null)
            {
                ParticleSystem? newParticleSystem = this._dustParticleSystem;
                ParticleSystem targetParticleSystem = component._dustParticleSystem;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component._dustParticleSystem = this._dustParticleSystem;
                }
            }
        }
    }
}
#nullable disable
