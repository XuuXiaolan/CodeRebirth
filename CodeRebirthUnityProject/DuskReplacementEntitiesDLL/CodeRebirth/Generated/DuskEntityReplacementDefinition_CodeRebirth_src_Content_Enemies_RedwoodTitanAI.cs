// <auto-generated> via DuskEntityReplacementBaker
#nullable enable
using UnityEngine;
using Dawn.Utils;
using System.Collections.Generic;
namespace Dusk
{
    [CreateAssetMenu(fileName = "New Enemy Replacement Definition", menuName = $"Entity Replacements/Enemy Replacements/CodeRebirth.src.Content.Enemies.RedwoodTitanAI")]
    public class DuskEntityReplacementDefinition_CodeRebirth_src_Content_Enemies_RedwoodTitanAI : DuskEnemyReplacementDefinition<CodeRebirth.src.Content.Enemies.RedwoodTitanAI>
    {
        [Space(10)]
        public AudioClipsWithTime _idleAudioClips = new();
        public AudioClip? eatenSound = null;
        public AudioClip? roarSound = null;
        public AudioClip? jumpSound = null;
        public AudioClip? kickSound = null;
        public AudioClip? crunchySquishSound = null;
        public AudioClip? spawnSound = null;
        public AudioClip? dieSFX = null;
        public AudioClip? potentialCreatureSFXFar = null;
        public AudioClip? potentialCreatureVoice = null;
        public AudioClip? potentialCreatureSFX = null;
        public ParticleSystem? DustParticlesLeft;
        public ParticleSystem? DustParticlesRight;
        public ParticleSystem? ForestKeeperParticles;
        public ParticleSystem? DriftwoodGiantParticles;
        public ParticleSystem? OldBirdParticles;
        public ParticleSystem? DeathParticles;
        public ParticleSystem? BigSmokeEffect;

        protected override void ApplyTyped(CodeRebirth.src.Content.Enemies.RedwoodTitanAI RedwoodTitanAI)
        {
            CodeRebirth.src.Content.Enemies.RedwoodTitanAI component = RedwoodTitanAI.gameObject.GetComponentInChildren<CodeRebirth.src.Content.Enemies.RedwoodTitanAI>();
            if (this._idleAudioClips.audioClips.Length > 0)
            {
                component._idleAudioClips = this._idleAudioClips;
            }
            if (component.creatureSFXFar.clip != null && this.potentialCreatureSFXFar != null)
            {
                component.creatureSFXFar.clip = this.potentialCreatureSFXFar;
            }
            if (component.creatureVoice.clip != null && this.potentialCreatureVoice != null)
            {
                component.creatureVoice.clip = this.potentialCreatureVoice;
            }
            if (component.creatureSFX.clip != null && this.potentialCreatureSFX != null)
            {
                component.creatureSFX.clip = this.potentialCreatureSFX;
            }
            if (this.eatenSound != null)
            {
                component.eatenSound = this.eatenSound;
            }
            if (this.roarSound != null)
            {
                component.roarSound = this.roarSound;
            }
            if (this.jumpSound != null)
            {
                component.jumpSound = this.jumpSound;
            }
            if (this.kickSound != null)
            {
                component.kickSound = this.kickSound;
            }
            if (this.crunchySquishSound != null)
            {
                component.crunchySquishSound = this.crunchySquishSound;
            }
            if (this.spawnSound != null)
            {
                component.spawnSound = this.spawnSound;
            }
            if (this.dieSFX != null)
            {
                component.dieSFX = this.dieSFX;
            }
            if (this.DustParticlesLeft != null)
            {
                ParticleSystem? newParticleSystem = this.DustParticlesLeft;
                ParticleSystem targetParticleSystem = component.DustParticlesLeft;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.DustParticlesLeft = this.DustParticlesLeft;
                }
            }
            if (this.DustParticlesRight != null)
            {
                ParticleSystem? newParticleSystem = this.DustParticlesRight;
                ParticleSystem targetParticleSystem = component.DustParticlesRight;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.DustParticlesRight = this.DustParticlesRight;
                }
            }
            if (this.ForestKeeperParticles != null)
            {
                ParticleSystem? newParticleSystem = this.ForestKeeperParticles;
                ParticleSystem targetParticleSystem = component.ForestKeeperParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.ForestKeeperParticles = this.ForestKeeperParticles;
                }
            }
            if (this.DriftwoodGiantParticles != null)
            {
                ParticleSystem? newParticleSystem = this.DriftwoodGiantParticles;
                ParticleSystem targetParticleSystem = component.DriftwoodGiantParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.DriftwoodGiantParticles = this.DriftwoodGiantParticles;
                }
            }
            if (this.OldBirdParticles != null)
            {
                ParticleSystem? newParticleSystem = this.OldBirdParticles;
                ParticleSystem targetParticleSystem = component.OldBirdParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.OldBirdParticles = this.OldBirdParticles;
                }
            }
            if (this.DeathParticles != null)
            {
                ParticleSystem? newParticleSystem = this.DeathParticles;
                ParticleSystem targetParticleSystem = component.DeathParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.DeathParticles = this.DeathParticles;
                }
            }
            if (this.BigSmokeEffect != null)
            {
                ParticleSystem? newParticleSystem = this.BigSmokeEffect;
                ParticleSystem targetParticleSystem = component.BigSmokeEffect;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    component.BigSmokeEffect = this.BigSmokeEffect;
                }
            }
        }
    }
}
#nullable disable
