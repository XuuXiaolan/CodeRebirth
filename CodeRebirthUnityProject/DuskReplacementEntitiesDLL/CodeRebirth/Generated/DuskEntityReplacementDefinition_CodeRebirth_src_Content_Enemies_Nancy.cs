// <auto-generated> via DuskEntityReplacementBaker
using UnityEngine;
using Dawn.Utils;
using System.Collections.Generic;
namespace Dusk
{
    [CreateAssetMenu(fileName = "New Enemy Replacement Definition", menuName = $"Entity Replacements/Enemy Replacements/CodeRebirth.src.Content.Enemies.Nancy")]
    public class DuskEntityReplacementDefinition_CodeRebirth_src_Content_Enemies_Nancy : DuskEnemyReplacementDefinition<CodeRebirth.src.Content.Enemies.Nancy>
    {
        [Space(10)]
        public AudioClipsWithTime _idleAudioClips = new();
        public AudioClip? spawnSound = null;
        public AudioClip? dieSFX = null;
        public AudioClip[] _detectInjuredPlayerVoicelines = System.Array.Empty<AudioClip>();
        public AudioClip[] _specialDetectInjuredPlayerVoicelines = System.Array.Empty<AudioClip>();
        public AudioClip[] _healFailVoicelines = System.Array.Empty<AudioClip>();
        public AudioClip[] _healSuccessVoiceline = System.Array.Empty<AudioClip>();
        public AudioClip? potential_rollingSource = null;
        public AudioClip? potential_healDuringSource = null;
        public AudioClip? potentialCreatureVoice = null;
        public AudioClip? potentialCreatureSFX = null;

        [Header("Experimental (Usually vanilla only): PlayAudioAnimationEvent overrides")]
        public AudioClip? ExperimentalAudioToPlay = null;
        public AudioClip? ExperimentalAudioToPlayB = null;
        public AudioClip? ExperimentalAudioClip = null;
        public AudioClip? ExperimentalAudioClip2 = null;
        public AudioClip? ExperimentalAudioClip3 = null;
        public AudioClip[] ExperimentalRandomClips  = System.Array.Empty<AudioClip>();
        public AudioClip[] ExperimentalRandomClips2 = System.Array.Empty<AudioClip>();
        public ParticleSystem? ExperimentalParticle = null;

        protected override void Apply(CodeRebirth.src.Content.Enemies.Nancy Nancy)
        {
            if (this._idleAudioClips.audioClips.Length > 0)
            {
                Nancy._idleAudioClips = this._idleAudioClips;
            }
            if (this._detectInjuredPlayerVoicelines.Length > 0)
            {
                Nancy._detectInjuredPlayerVoicelines = this._detectInjuredPlayerVoicelines;
            }
            if (this._specialDetectInjuredPlayerVoicelines.Length > 0)
            {
                Nancy._specialDetectInjuredPlayerVoicelines = this._specialDetectInjuredPlayerVoicelines;
            }
            if (this._healFailVoicelines.Length > 0)
            {
                Nancy._healFailVoicelines = this._healFailVoicelines;
            }
            if (this._healSuccessVoiceline.Length > 0)
            {
                Nancy._healSuccessVoiceline = this._healSuccessVoiceline;
            }
            if (Nancy._rollingSource.clip != null && this.potential_rollingSource != null)
            {
                Nancy._rollingSource.clip = this.potential_rollingSource;
            }
            if (Nancy._healDuringSource.clip != null && this.potential_healDuringSource != null)
            {
                Nancy._healDuringSource.clip = this.potential_healDuringSource;
            }
            if (Nancy.creatureVoice.clip != null && this.potentialCreatureVoice != null)
            {
                Nancy.creatureVoice.clip = this.potentialCreatureVoice;
            }
            if (Nancy.creatureSFX.clip != null && this.potentialCreatureSFX != null)
            {
                Nancy.creatureSFX.clip = this.potentialCreatureSFX;
            }
            if (this.spawnSound != null)
            {
                Nancy.spawnSound = this.spawnSound;
            }
            if (this.dieSFX != null)
            {
                Nancy.dieSFX = this.dieSFX;
            }

            Animator? animator = Nancy.GetComponentInChildren<Animator>(true);
            if (animator != null)
            {
                PlayAudioAnimationEvent? playAudioAnimationEvent = animator.gameObject.GetComponent<PlayAudioAnimationEvent>();
                if (playAudioAnimationEvent != null)
                {
                    if (this.ExperimentalAudioToPlay  != null) playAudioAnimationEvent.audioToPlay.clip  = this.ExperimentalAudioToPlay;
                    if (this.ExperimentalAudioToPlayB != null) playAudioAnimationEvent.audioToPlayB.clip = this.ExperimentalAudioToPlayB;

                    if (this.ExperimentalAudioClip  != null) playAudioAnimationEvent.audioClip  = this.ExperimentalAudioClip;
                    if (this.ExperimentalAudioClip2 != null) playAudioAnimationEvent.audioClip2 = this.ExperimentalAudioClip2;
                    if (this.ExperimentalAudioClip3 != null) playAudioAnimationEvent.audioClip3 = this.ExperimentalAudioClip3;

                    if (this.ExperimentalRandomClips.Length > 0 && playAudioAnimationEvent.randomClips.Length > 0)
                    {
                        playAudioAnimationEvent.randomClips = this.ExperimentalRandomClips;
                    }
                    if (this.ExperimentalRandomClips2.Length > 0 && playAudioAnimationEvent.randomClips2.Length > 0)
                    {
                        playAudioAnimationEvent.randomClips2 = this.ExperimentalRandomClips2;
                    }

                    if (this.ExperimentalParticle != null && playAudioAnimationEvent.particle != null)
                    {
                        GameObject newGameObject = GameObject.Instantiate(this.ExperimentalParticle.gameObject, playAudioAnimationEvent.particle.transform.parent);
                        newGameObject.name = playAudioAnimationEvent.particle.gameObject.name;
                        Destroy(playAudioAnimationEvent.particle.gameObject);
                        playAudioAnimationEvent.particle = newGameObject.GetComponent<ParticleSystem>();
                    }
                }
            }
        }
    }
}
