// <auto-generated> via DuskEntityReplacementBaker
using UnityEngine;
using System.Collections.Generic;
namespace Dusk
{
    [CreateAssetMenu(fileName = "New Enemy Replacement Definition", menuName = $"Entity Replacements/Enemy Replacements/CodeRebirth.src.Content.Enemies.Guardsman")]
    public class DuskEntityReplacementDefinition_CodeRebirth_src_Content_Enemies_Guardsman : DuskEnemyReplacementDefinition<CodeRebirth.src.Content.Enemies.Guardsman>
    {
        [Space(10)]
        public AudioClip? _slamAudioClip = null;
        public AudioClip? _ripApartAudioClip = null;
        public AudioClip? spawnSound = null;
        public AudioClip? dieSFX = null;
        public AudioClip[] _enemySpottedAudioClips = System.Array.Empty<AudioClip>();
        public AudioClip? potentialCreatureVoice = null;
        public AudioClip? potentialCreatureSFX = null;
        public ParticleSystem? _dustParticleSystem;

        [Header("Experimental: PlayAudioAnimationEvent overrides")]
        public AudioSource? ExperimentalAudioToPlay = null;
        public AudioSource? ExperimentalAudioToPlayB = null;
        public AudioClip? ExperimentalAudioClip = null;
        public AudioClip? ExperimentalAudioClip2 = null;
        public AudioClip? ExperimentalAudioClip3 = null;
        public AudioClip[] ExperimentalRandomClips  = System.Array.Empty<AudioClip>();
        public AudioClip[] ExperimentalRandomClips2 = System.Array.Empty<AudioClip>();
        public ParticleSystem? ExperimentalParticle = null;

        protected override void Apply(CodeRebirth.src.Content.Enemies.Guardsman Guardsman)
        {
            if (this._enemySpottedAudioClips.Length > 0)
            {
                Guardsman._enemySpottedAudioClips = this._enemySpottedAudioClips;
            }
            if (Guardsman.creatureVoice.clip != null && this.potentialCreatureVoice != null)
            {
                Guardsman.creatureVoice.clip = this.potentialCreatureVoice;
            }
            if (Guardsman.creatureSFX.clip != null && this.potentialCreatureSFX != null)
            {
                Guardsman.creatureSFX.clip = this.potentialCreatureSFX;
            }
            if (this._slamAudioClip != null)
            {
                Guardsman._slamAudioClip = this._slamAudioClip;
            }
            if (this._ripApartAudioClip != null)
            {
                Guardsman._ripApartAudioClip = this._ripApartAudioClip;
            }
            if (this.spawnSound != null)
            {
                Guardsman.spawnSound = this.spawnSound;
            }
            if (this.dieSFX != null)
            {
                Guardsman.dieSFX = this.dieSFX;
            }
            if (this._dustParticleSystem != null)
            {
                ParticleSystem? newParticleSystem = this._dustParticleSystem;
                ParticleSystem targetParticleSystem = Guardsman._dustParticleSystem;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    Guardsman._dustParticleSystem = this._dustParticleSystem;
                }
            }

            Animator? animator = Guardsman.GetComponentInChildren<Animator>(true);
            if (animator != null)
            {
                PlayAudioAnimationEvent playAudioAnimationEvent = animator.gameObject.GetComponent<PlayAudioAnimationEvent>();
                if (playAudioAnimationEvent != null)
                {
                    if (this.ExperimentalAudioToPlay  != null) playAudioAnimationEvent.audioToPlay  = this.ExperimentalAudioToPlay;
                    if (this.ExperimentalAudioToPlayB != null) playAudioAnimationEvent.audioToPlayB = this.ExperimentalAudioToPlayB;

                    if (this.ExperimentalAudioClip  != null) playAudioAnimationEvent.audioClip  = this.ExperimentalAudioClip;
                    if (this.ExperimentalAudioClip2 != null) playAudioAnimationEvent.audioClip2 = this.ExperimentalAudioClip2;
                    if (this.ExperimentalAudioClip3 != null) playAudioAnimationEvent.audioClip3 = this.ExperimentalAudioClip3;

                    if (this.ExperimentalRandomClips.Length > 0 && playAudioAnimationEvent.randomClips.Length > 0)
                    {
                        playAudioAnimationEvent.randomClips = this.ExperimentalRandomClips;
                    }
                    if (this.ExperimentalRandomClips2.Length > 0 && playAudioAnimationEvent.randomClips2.Length > 0)
                    {
                        playAudioAnimationEvent.randomClips2 = this.ExperimentalRandomClips2;
                    }

                    if (this.ExperimentalParticle != null && playAudioAnimationEvent.particle != null)
                    {
                        GameObject newGameObject = GameObject.Instantiate(this.ExperimentalParticle.gameObject, playAudioAnimationEvent.particle.transform.parent);
                        newGameObject.name = playAudioAnimationEvent.particle.gameObject.name;
                        Destroy(playAudioAnimationEvent.particle.gameObject);
                        playAudioAnimationEvent.particle = newGameObject.GetComponent<ParticleSystem>();
                    }
                }
            }
        }
    }
}
