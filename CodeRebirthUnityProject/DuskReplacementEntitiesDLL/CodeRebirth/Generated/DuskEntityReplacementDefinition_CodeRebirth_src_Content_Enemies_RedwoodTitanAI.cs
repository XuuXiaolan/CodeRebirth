// <auto-generated> via DuskEntityReplacementBaker
using UnityEngine;
using Dawn.Utils;
using System.Collections.Generic;
namespace Dusk
{
    [CreateAssetMenu(fileName = "New Enemy Replacement Definition", menuName = $"Entity Replacements/Enemy Replacements/CodeRebirth.src.Content.Enemies.RedwoodTitanAI")]
    public class DuskEntityReplacementDefinition_CodeRebirth_src_Content_Enemies_RedwoodTitanAI : DuskEnemyReplacementDefinition<CodeRebirth.src.Content.Enemies.RedwoodTitanAI>
    {
        [Space(10)]
        public AudioClipsWithTime _idleAudioClips = new();
        public AudioClip? eatenSound = null;
        public AudioClip? roarSound = null;
        public AudioClip? jumpSound = null;
        public AudioClip? kickSound = null;
        public AudioClip? crunchySquishSound = null;
        public AudioClip? spawnSound = null;
        public AudioClip? dieSFX = null;
        public AudioClip? potentialCreatureSFXFar = null;
        public AudioClip? potentialCreatureVoice = null;
        public AudioClip? potentialCreatureSFX = null;
        public ParticleSystem? DustParticlesLeft;
        public ParticleSystem? DustParticlesRight;
        public ParticleSystem? ForestKeeperParticles;
        public ParticleSystem? DriftwoodGiantParticles;
        public ParticleSystem? OldBirdParticles;
        public ParticleSystem? DeathParticles;
        public ParticleSystem? BigSmokeEffect;

        [Header("Experimental (Usually vanilla only): PlayAudioAnimationEvent overrides")]
        public AudioClip? ExperimentalAudioToPlay = null;
        public AudioClip? ExperimentalAudioToPlayB = null;
        public AudioClip? ExperimentalAudioClip = null;
        public AudioClip? ExperimentalAudioClip2 = null;
        public AudioClip? ExperimentalAudioClip3 = null;
        public AudioClip[] ExperimentalRandomClips  = System.Array.Empty<AudioClip>();
        public AudioClip[] ExperimentalRandomClips2 = System.Array.Empty<AudioClip>();
        public ParticleSystem? ExperimentalParticle = null;

        protected override void Apply(CodeRebirth.src.Content.Enemies.RedwoodTitanAI RedwoodTitanAI)
        {
            if (this._idleAudioClips.audioClips.Length > 0)
            {
                RedwoodTitanAI._idleAudioClips = this._idleAudioClips;
            }
            if (RedwoodTitanAI.creatureSFXFar.clip != null && this.potentialCreatureSFXFar != null)
            {
                RedwoodTitanAI.creatureSFXFar.clip = this.potentialCreatureSFXFar;
            }
            if (RedwoodTitanAI.creatureVoice.clip != null && this.potentialCreatureVoice != null)
            {
                RedwoodTitanAI.creatureVoice.clip = this.potentialCreatureVoice;
            }
            if (RedwoodTitanAI.creatureSFX.clip != null && this.potentialCreatureSFX != null)
            {
                RedwoodTitanAI.creatureSFX.clip = this.potentialCreatureSFX;
            }
            if (this.eatenSound != null)
            {
                RedwoodTitanAI.eatenSound = this.eatenSound;
            }
            if (this.roarSound != null)
            {
                RedwoodTitanAI.roarSound = this.roarSound;
            }
            if (this.jumpSound != null)
            {
                RedwoodTitanAI.jumpSound = this.jumpSound;
            }
            if (this.kickSound != null)
            {
                RedwoodTitanAI.kickSound = this.kickSound;
            }
            if (this.crunchySquishSound != null)
            {
                RedwoodTitanAI.crunchySquishSound = this.crunchySquishSound;
            }
            if (this.spawnSound != null)
            {
                RedwoodTitanAI.spawnSound = this.spawnSound;
            }
            if (this.dieSFX != null)
            {
                RedwoodTitanAI.dieSFX = this.dieSFX;
            }
            if (this.DustParticlesLeft != null)
            {
                ParticleSystem? newParticleSystem = this.DustParticlesLeft;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.DustParticlesLeft;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.DustParticlesLeft = this.DustParticlesLeft;
                }
            }
            if (this.DustParticlesRight != null)
            {
                ParticleSystem? newParticleSystem = this.DustParticlesRight;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.DustParticlesRight;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.DustParticlesRight = this.DustParticlesRight;
                }
            }
            if (this.ForestKeeperParticles != null)
            {
                ParticleSystem? newParticleSystem = this.ForestKeeperParticles;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.ForestKeeperParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.ForestKeeperParticles = this.ForestKeeperParticles;
                }
            }
            if (this.DriftwoodGiantParticles != null)
            {
                ParticleSystem? newParticleSystem = this.DriftwoodGiantParticles;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.DriftwoodGiantParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.DriftwoodGiantParticles = this.DriftwoodGiantParticles;
                }
            }
            if (this.OldBirdParticles != null)
            {
                ParticleSystem? newParticleSystem = this.OldBirdParticles;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.OldBirdParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.OldBirdParticles = this.OldBirdParticles;
                }
            }
            if (this.DeathParticles != null)
            {
                ParticleSystem? newParticleSystem = this.DeathParticles;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.DeathParticles;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.DeathParticles = this.DeathParticles;
                }
            }
            if (this.BigSmokeEffect != null)
            {
                ParticleSystem? newParticleSystem = this.BigSmokeEffect;
                ParticleSystem targetParticleSystem = RedwoodTitanAI.BigSmokeEffect;
                if (newParticleSystem != null && targetParticleSystem != null)
                {
                    GameObject newParticle = GameObject.Instantiate(newParticleSystem.gameObject, targetParticleSystem.transform.parent);
                    newParticle.name = targetParticleSystem.gameObject.name;
                    Destroy(targetParticleSystem.gameObject);
                    RedwoodTitanAI.BigSmokeEffect = this.BigSmokeEffect;
                }
            }

            Animator? animator = RedwoodTitanAI.GetComponentInChildren<Animator>(true);
            if (animator != null)
            {
                PlayAudioAnimationEvent? playAudioAnimationEvent = animator.gameObject.GetComponent<PlayAudioAnimationEvent>();
                if (playAudioAnimationEvent != null)
                {
                    if (this.ExperimentalAudioToPlay  != null) playAudioAnimationEvent.audioToPlay.clip  = this.ExperimentalAudioToPlay;
                    if (this.ExperimentalAudioToPlayB != null) playAudioAnimationEvent.audioToPlayB.clip = this.ExperimentalAudioToPlayB;

                    if (this.ExperimentalAudioClip  != null) playAudioAnimationEvent.audioClip  = this.ExperimentalAudioClip;
                    if (this.ExperimentalAudioClip2 != null) playAudioAnimationEvent.audioClip2 = this.ExperimentalAudioClip2;
                    if (this.ExperimentalAudioClip3 != null) playAudioAnimationEvent.audioClip3 = this.ExperimentalAudioClip3;

                    if (this.ExperimentalRandomClips.Length > 0 && playAudioAnimationEvent.randomClips.Length > 0)
                    {
                        playAudioAnimationEvent.randomClips = this.ExperimentalRandomClips;
                    }
                    if (this.ExperimentalRandomClips2.Length > 0 && playAudioAnimationEvent.randomClips2.Length > 0)
                    {
                        playAudioAnimationEvent.randomClips2 = this.ExperimentalRandomClips2;
                    }

                    if (this.ExperimentalParticle != null && playAudioAnimationEvent.particle != null)
                    {
                        GameObject newGameObject = GameObject.Instantiate(this.ExperimentalParticle.gameObject, playAudioAnimationEvent.particle.transform.parent);
                        newGameObject.name = playAudioAnimationEvent.particle.gameObject.name;
                        Destroy(playAudioAnimationEvent.particle.gameObject);
                        playAudioAnimationEvent.particle = newGameObject.GetComponent<ParticleSystem>();
                    }
                }
            }
        }
    }
}
